package delphos.iu;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.hibernate.Query;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

import delphos.Searcher;
import delphos.Tendencia;

/*INTERFAZ REALIZADO CON NETBEANS
Cambios introducidos:
- Cambio de algunos componentes a protected.
- Paso de framePrincipal al constructor y atributo para recogerlo.
- Interfaz ConDefaultButton
- ActionListener

*/

public class PanelTendencias extends javax.swing.JPanel implements ConDefaultButton, ActionListener {

	public DelphosFrame framePrincipal;
	protected PanelTendenciasBuscador panelBuscador;
	protected PanelTendenciasEditor panelEditor;

	/**
	 * Creates new form PanelTendencias
	 */
	public PanelTendencias(DelphosFrame framePrincipal) {
		this.framePrincipal = framePrincipal;
		initComponents();
	}

	/**
	 * /** This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		bgPublicado = new javax.swing.ButtonGroup();
		panelSuperior = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jbtnCambiarPanel = new javax.swing.JButton();
		jlblAvisosPendientes = new javax.swing.JLabel();
		jbtnRevisar = new javax.swing.JButton();
		panelContenido = new javax.swing.JPanel();
		panelContenido.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		panelBuscador = new PanelTendenciasBuscador(this);
		panelEditor = new PanelTendenciasEditor(this);

		panelSuperior.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		jLabel1.setBackground(new java.awt.Color(255, 153, 0));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("Tendencias");
		jLabel1.setOpaque(true);

		jbtnCambiarPanel.setText("Editar Listado");
		jbtnCambiarPanel.addActionListener(this);

		actualizarNumAvisosPendientes();

		jbtnRevisar.setText("Revisar Ahora");
		jbtnRevisar.addActionListener(this);

		javax.swing.GroupLayout panelEditorLayout = new javax.swing.GroupLayout(panelSuperior);
		panelSuperior.setLayout(panelEditorLayout);
		panelEditorLayout.setHorizontalGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(panelEditorLayout.createSequentialGroup().addContainerGap().addGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jbtnCambiarPanel).addComponent(jlblAvisosPendientes, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jbtnRevisar).addGap(240, 240, 240)));
		panelEditorLayout.setVerticalGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelEditorLayout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(panelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(panelEditorLayout.createSequentialGroup().addComponent(jbtnCambiarPanel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jlblAvisosPendientes)).addComponent(jbtnRevisar)).addGap(0, 9, Short.MAX_VALUE)));

		panelContenido.setLayout(new CardLayout());
		panelContenido.add(panelEditor);
		panelEditor.setVisible(false);
		panelContenido.add(panelBuscador);
		panelBuscador.setVisible(true);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(panelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(panelContenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(panelContenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addContainerGap()));
	}// </editor-fold>

	// Variables declaration - do not modify
	private javax.swing.ButtonGroup bgPublicado;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JButton jbtnCambiarPanel;
	private javax.swing.JButton jbtnRevisar;
	private javax.swing.JLabel jlblAvisosPendientes;
	private javax.swing.JPanel panelContenido;
	private javax.swing.JPanel panelSuperior;
	// End of variables declaration

	public void actualizarNumAvisosPendientes() {
		int numAvisos;
		String sql = "SELECT COUNT(*) FROM AvisoTendencia WHERE revisado = 0";
		Query query = Delphos.getSession().createSQLQuery(sql);
		numAvisos = ((BigInteger) query.uniqueResult()).intValue();

		if (numAvisos != 0)
			jlblAvisosPendientes.setText("Tiene " + numAvisos + " avisos pendientes de revisión.");
		else
			jlblAvisosPendientes.setText("No tiene avisos pendientes");
		this.revalidate();
	}

	@Override
	public JButton getDefaultButton() {
		return panelBuscador.jbtnBuscar;
	}

	public void cambiarPanel() {
		if (this.panelBuscador.isVisible()) {
			this.panelBuscador.setVisible(false);
			this.panelEditor.setVisible(true);
			this.jbtnCambiarPanel.setText("Buscar Tendencias");
		} else {
			this.panelBuscador.setVisible(true);
			this.panelEditor.setVisible(false);
			this.jbtnCambiarPanel.setText("Editar Listado");
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		this.framePrincipal.frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		System.out.println("PanelTendencias: ActionEvent");
		if (e.getSource() == this.jbtnCambiarPanel)
			cambiarPanel();
		if (e.getSource() == this.jbtnRevisar)
			framePrincipal.controller.verPanel(framePrincipal.panelAvisosTendencia);
		this.framePrincipal.frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		this.framePrincipal.frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}

	public String preguntarFiltroPrincipal(Tendencia tendencia, String tipo) {

		ArrayList<String> filtros = new ArrayList<String>();

		if ("Licitaciones".equals(tipo)) {
			if (!tendencia.getTerminoPrincipal().isEmpty())
				filtros.add(Tendencia.TEXTO_LIBRE);
			if (!tendencia.getListaLicitacionLocalizacion().isEmpty()) {
				filtros.add(Tendencia.PAIS);
			}
			if (!tendencia.getListaLicitacionSector().isEmpty())
				filtros.add(Tendencia.SECTOR);
			if (tendencia.getLicitacionTipo() != null)
				filtros.add(Tendencia.TIPO);
			if (!tendencia.getLicitacionEntidadSolicitante().isEmpty())
				filtros.add(Tendencia.SOLICITANTE);
		}
		if ("Patentes".equals(tipo)) {
			if (!tendencia.getTerminoPrincipal().isEmpty()) {
				filtros.add(Tendencia.TEXTO_LIBRE);
			}
			if (!tendencia.getListaPatenteLocalizacion().isEmpty()) {
				filtros.add(Tendencia.PAIS);
			}
			if (!tendencia.getListaPatenteSector().isEmpty())
				filtros.add(Tendencia.SECTOR);
			if (!tendencia.getPatenteInventor().isEmpty())
				filtros.add(Tendencia.INVENTOR);
			if (!tendencia.getPatenteSolicitante().isEmpty())
				filtros.add(Tendencia.SOLICITANTE);
		}
		if ("Documentos".equals(tipo)) {
			if (!tendencia.getTerminoPrincipal().isEmpty())
				filtros.add(Tendencia.TEXTO_LIBRE);
			if (!tendencia.getListaDocumentoClasificacion().isEmpty())
				filtros.add(Tendencia.CLASIFICACION);
			if (!tendencia.getDocumentoAutor().isEmpty())
				filtros.add(Tendencia.AUTOR);
			if (!tendencia.getDocumentoEntidad().isEmpty())
				filtros.add(Tendencia.ENTIDAD);
		}
		String[] afiltros = new String[filtros.size()];
		for (int i = 0; i < filtros.size(); i++)
			afiltros[i] = filtros.get(i);
		JFrame frame = new JFrame("Elija el Filtro Principal de " + tipo);

		return (String) JOptionPane.showInputDialog(frame, "¿Qué filtro es el principal para " + tipo + "?", "Elija el Filtro Principal para " + tipo, JOptionPane.QUESTION_MESSAGE, null, afiltros, afiltros[0]);

	}

	public void mostrarGraficaTendencia(Tendencia tendencia, int periodo, GregorianCalendar fechaDesde, GregorianCalendar fechaHasta, String sPeriodo) {
		ChartPanel panel = new ChartPanel(construirDatos(tendencia, periodo, fechaDesde, fechaHasta));
		new FrameGraficoTendencia(panel, tendencia);
		
//		ChartFrame frame = new ChartFrame("Tendencia", construirDatos(tendencia, periodo, fechaDesde, fechaHasta));
//		frame.pack();
//		frame.setVisible(true);
	}

	public void compararGraficasTendencia(Tendencia tendencia, int periodo, GregorianCalendar fechaInicioPeriodoAnterior, GregorianCalendar fechaInicioPeriodoActual, GregorianCalendar fechaFinPeriodoActual) {
		GregorianCalendar fechaFinPeriodoAnterior = (GregorianCalendar)fechaInicioPeriodoActual.clone();
		//ChartFrame frame1 = new ChartFrame("Periodo Actual", construirDatos(tendencia, periodo, fechaInicioPeriodoActual, fechaFinPeriodoActual));
		//ChartFrame frame2 = new ChartFrame("Periodo Anterior", construirDatos(tendencia, periodo, fechaInicioPeriodoAnterior, fechaFinPeriodoAnterior));
//		frame1.pack();
//		frame1.setVisible(true);
//		frame2.pack();
//		frame2.setVisible(true);

		ChartPanel panel1 = new ChartPanel(construirDatos(tendencia, periodo, fechaInicioPeriodoActual, fechaFinPeriodoActual));
		ChartPanel panel2 = new ChartPanel(construirDatos(tendencia, periodo, fechaInicioPeriodoAnterior, fechaFinPeriodoAnterior));
		new FrameGraficoTendencia(panel1, tendencia);
		new FrameGraficoTendencia(panel2, tendencia);
		
	}

	private JFreeChart construirDatos(Tendencia tendencia, int periodo, GregorianCalendar fechaInicioPeriodo, GregorianCalendar fechaFinPeriodo) {
		DefaultCategoryDataset dataset = null;
		JFreeChart chart = null;
		try {
			String titulo = tendencia.toString();
			if (titulo.length() > 0)
				titulo += "\n";
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			titulo += sdf.format(fechaInicioPeriodo.getTime()) + " - " + sdf.format(fechaFinPeriodo.getTime());
			dataset = Searcher.buscarTendencia(tendencia, periodo, fechaInicioPeriodo, fechaFinPeriodo);
			chart = ChartFactory.createLineChart(titulo, "Fecha", "Documentos que contienen el término (%)", dataset, PlotOrientation.VERTICAL, true, true, false);
			// Ver
			// http://stackoverflow.com/questions/19289323/how-to-set-tooltip-on-my-jfreechart
			// para las tooltips

			CategoryPlot plot = (CategoryPlot) chart.getPlot();
			plot.setBackgroundPaint(Color.lightGray);
			plot.setRangeGridlinePaint(Color.white);

			CategoryAxis ejeX = plot.getDomainAxis();

			ejeX.setTickLabelFont(new Font("Dialog", Font.PLAIN, 10));

			LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
			renderer.setShapesVisible(true);
			renderer.setDrawOutlines(true);
			renderer.setUseFillPaint(true);
			renderer.setFillPaint(Color.white);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			JOptionPane.showMessageDialog(this, "Error al procesar la consulta", "Error", JOptionPane.ERROR_MESSAGE);
			e1.printStackTrace();
		}

		return chart;
	}

}
